---

- name: Settings - retrieve current settings
  ansible.builtin.command: >-
    {{ awx_command }} settings list
  environment:
    TOWER_HOST: "{{ awx_url }}"
    TOWER_USERNAME: "{{ awx_username if awx_token is undefined else omit }}"
    TOWER_PASSWORD: "{{ awx_password if awx_token is undefined else omit }}"
    TOWER_OAUTH_TOKEN: "{{ awx_token | default(omit) }}"
    TOWER_VERIFY_SSL: "{{ awx_verify_ssl }}"
  changed_when: false
  check_mode: false
  register: _awx_settings

- name: Settings - retrieve required settings
  ansible.builtin.set_fact:
    settings_present: >-
      {{ _awx_settings.stdout | from_json }}
    settings_required: >-
      {{ lookup('file', awx_config_path + '/settings/settings.yml') | from_yaml }}
    keys_present: >-
      {{ _awx_settings.stdout | from_json | dict2items | json_query('[].key') }}
    keys_required: >-
      {{ lookup('file', awx_config_path + '/settings/settings.yml') | from_yaml | json_query('[].key') }}

- name: Settings - update all settings from import
  awx.awx.settings:
    controller_host: "{{ awx_url }}"
    controller_username: "{{ awx_username if awx_token is undefined else omit }}"
    controller_password: "{{ awx_password if awx_token is undefined else omit }}"
    controller_oauthtoken: "{{ awx_token | default(omit) }}"
    validate_certs: "{{ awx_verify_ssl }}"
    name: "{{ item.key }}"
    value: >-
      {{ item.value | regex_replace('slmgtams(1038|1080)', 'awx') }}
  when:
    - item.key in keys_required
    - item.key in keys_present
    - item.key is not search('(AUTH_LDAP_\\d|SOCIAL|AUTH_LDAP_BIND_PASSWORD)')
    - item.value != None
    - item.value | type_debug is search('(bool|int|float)') or item.value | length > 0
    - (settings_present[item.key] is undefined or item.value != settings_present[item.key])
  # failed_when: false
  loop: "{{ settings_required }}"
  loop_control:
    label:
      - "{{ item.key }}"

- name: Setting - set LDAP bind password
  awx.awx.settings:
    controller_host: "{{ awx_url }}"
    controller_username: "{{ awx_username if awx_token is undefined else omit }}"
    controller_password: "{{ awx_password if awx_token is undefined else omit }}"
    controller_oauthtoken: "{{ awx_token | default(omit) }}"
    validate_certs: "{{ awx_verify_ssl }}"
    name: AUTH_LDAP_BIND_PASSWORD
    value: "{{ awx_ldap_password }}"
  when: awx_ldap_password is defined

---

- name: Loop over all hosts and create list of ones not present
  ansible.builtin.set_fact:
    awx_hosts_non_existing: >-
      {{ awx_hosts_non_existing | default([]) + [item.name] }}
  when:
    - awx_host_dns_check | bool
    - lookup('dig', item.name) == 'NXDOMAIN'
  loop: "{{ lookup('file', awx_config_path + '/hosts/hosts.yml') | from_yaml }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create AWX hosts  # noqa jinja[spacing]
  awx.awx.host:

    # AWX connection & authentication
    controller_config_file: "{{ awx_config_file | default(omit) }}"
    controller_host: "{{ awx_url }}"
    controller_username: "{{ awx_username if awx_token is undefined else omit }}"
    controller_password: "{{ awx_password if awx_token is undefined else omit }}"
    controller_oauthtoken: "{{ awx_token | default(omit) }}"
    validate_certs: "{{ awx_verify_ssl }}"

    # Required parameters
    inventory: "{{ item.inventory }}"
    name: "{{ item.name }}"

    # Optional parameters
    description: "{{ item.description | default(omit) }}"
    enabled: "{{ item.enabled | default(omit) }}"
    new_name: "{{ item.new_name | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    variables: >-
      {%- set var_path = '/hosts/variables/' -%}
      {%- if awx_vars_format == 'json' -%}
      {%- set varsfile = awx_config_path + var_path + item.name + '.json' -%}
      {{ lookup('file', varsfile, errors='ignore') | default({}, true) }}
      {%- elif awx_vars_format == 'yaml' -%}
      {%- set varsfile = awx_config_path + var_path + item.name + '.yml' -%}
      {{ lookup('file', varsfile, errors='ignore') | from_yaml | default({}, true) }}
      {%- endif -%}

  ignore_errors: "{{ awx_ignore_errors | default(False) }}"  # noqa ignore-errors
  when:
    - awx_create_hosts | bool
    - not awx_host_dns_check | bool or ( awx_host_dns_check | bool and item.name not in awx_hosts_non_existing )
  loop: "{{ lookup('file', awx_config_path + '/hosts/hosts.yml') | from_yaml }}"
  loop_control:
    label: "{{ item.name }}"
